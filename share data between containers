1-
-	docker volume create --name DataVolume1                      (to Create a DataVolume out of any container till now)
-	docker run -ti --rm -v DataVolume1:/datavolume1 ubuntu       (creat our first container ubuntu with a datavolume 1 related to our DataVolume)
-	echo "Example1" > /datavolume1/Example1.txt                  (write Exemple1 inside datavolume1 Exemple1.txt)

-	Exit                                                         (now the container is removed becuase of --rm )

-	docker volume inspect DataVolume1
-	docker run --rm -ti -v DataVolume1:/datavolume1 ubuntu       (create segond container from ubuntu image with a new datavolume1 related to DataVolume1 )
-	cat /datavolume1/Example1.txt
             Output
             Example1                      (so we can read that the old container write in DataVolume1 : we share the data)
-	exit


2-Creating a Volume that Persists when the Container is Removed :

docker run -ti --name=Container2 –v DataVolume2:/datavolume2 ubuntu   (create a new container and a new DataVolume2 and a datavolume2 related to DataVolume2)
-	echo "Example2" > /datavolume2/Example2.txt                          (wirte Exemple2 in datavolume2/Exemple2.txt)
-	cat /datavolume2/Example2.txt                                
   Output
   Example2

We'll exit the container:
•	exit
•	docker start -ai Container2
Let's verify that the volume has indeed mounted and our data is still in place:
•	cat /datavolume2/Example2.txt
•	
Output
Example2
Finally, let's exit and clean up. 
•	exit



3-Sharing Data between Multiple Docker Containers :
              (create container4 and datavolume4)
-	docker run -ti --name=Container4 -v DataVolume4:/datavolume4 ubuntu 
-	echo "This file is shared between containers" > datavolume4/Example4.txt
-	Exit
(create container 5  and mount volume from container 4)
-	docker run -ti --name=Container5 --volumes-from Container4 ubuntu
-	cat /datavolume4/Example4.txt
-	
Output
This file is shared between containers
-	echo "Both containers can write to DataVolume4" >> /datavolume4/Example4.txt
-	exit
(View Changes Made in Container5) 
-	docker start -ai Container4

-	cat /datavolume4/Example4.txt

Output
This file is shared between containers
Both containers can write to DataVolume4
-	exit
 (Start Container 6 and Mount the Volume Read-Only)
-	run -ti --name=Container6 --volumes-from Container4:ro Ubuntu
-	rm /datavolume4/Example4.txt
Output
rm: cannot remove '/datavolume4/Example4.txt': Read-only file system
-exit 
Now that we’re done, let’s clean up our containers and volume: 
	docker rm Container4 Container5 Container6
	docker volume rm DataVolume4
